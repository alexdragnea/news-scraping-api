name: CI/CD Pipeline
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  #Maven Build Job
  mvn_build:
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run mvn clean install and Bump Version
      - name: Run Maven Install amd Bump Version
        run: mvn clean install -DbumpMinor -Dmaven.test.skip

  tests:
    permissions: write-all
    #Depends on test's job
    needs: mvn_build
    name: Unit Tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: admin
          POSTGRES_USER: postgres
          POSTGRES_DB: scraper
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Run PostgreSQL setup script
      - name: Setup config
        run: |
          mkdir config
          echo 'spring.datasource.url=jdbc:postgresql://postgres:5432/scraper' > config/application.yml
      #Run Tests
      - name: Run Unit Tests
        env:
          # Pass the PostgreSQL service port to the test command
          DB_URL: jdbc:postgresql://localhost:5432/scraper
        run: mvn -B test -Dspring.datasource.url=${{ env.DB_URL }}


  owasp:
    permissions: write-all
    name: OWASP ZAP SCANS
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Building Docker Image
        run: docker-compose build
      - name: Launching the app
        run: docker-compose up --detach

      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:5000'
          issue_title: OWASP Security Testing


