name: CI/CD Pipeline
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  #Maven Build Job
  mvn_build:
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run mvn clean install and Bump Version
      - name: Run Maven Install amd Bump Version
        run: mvn clean install -DbumpMinor -Dmaven.test.skip
  unit-tests:
    #Depends on test's job
    needs: mvn_build
    name: Unit & Mutation Tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Install dependencies and compile the code
      - name: Build with Maven
        run: mvn clean install

      # Run the unit tests
      - name: Run unit tests
        run: mvn test

#  tests:
#    #Depends on test's job
#    needs: mvn_build
#    name: Unit Tests
#    #Run on Ubuntu using the latest version
#    runs-on: ubuntu-latest
#    #Job's steps
#    steps:
#      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
#      - uses: actions/checkout@v1
#      #Set up JDK 11
#      - name: Set up JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: '11'
#      #Set up Maven cache
#      - name: Cache Maven packages
#        #This action allows caching dependencies and build outputs to improve workflow execution time.
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      # Start PostgreSQL container
#      - name: Start PostgreSQL
#        uses: docker://postgres
#        with:
#          # Set up a custom database and user with credentials
#          env: |
#            POSTGRES_DB=scraper
#            POSTGRES_USER=postgres
#            POSTGRES_PASSWORD=admin
#          # Expose PostgreSQL port
#          ports: |
#            5432:5432
#      - name: Run Unit Tests
#        run: mvn -B test
#      # Stop PostgreSQL container
#      - name: Stop PostgreSQL
#        uses: docker://postgres
#        with:
#          # Send SIGINT to gracefully shut down the container
#          entrypoint: ["pg_ctl"]
#          args: ["-D", "/var/lib/postgresql/data", "stop"]

  owasp:
    name: OWASP ZAP SCANS
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Building Docker Image
        run: docker-compose build
      - name: Launching the app
        run: docker-compose up --detach

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:5000'
          issue_title: OWASP Security Testing