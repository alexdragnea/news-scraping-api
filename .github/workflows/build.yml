name: CI/CD Pipeline
on:
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  #Maven Build Job
  mvn_build:
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '11'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run mvn clean install and Bump Version
      - name: Run Maven Install amd Bump Version
        run: mvn clean install -DbumpMinor -Dmaven.test.skip

  jobs:
    tests:
      permissions: write-all
      #Depends on test's job
      needs: mvn_build
      name: Unit & Mutation Tests
      #Run on Ubuntu using the latest version
      runs-on: ubuntu-latest
      services:
        # Define the PostgreSQL service
        postgres:
          image: postgres:13
          ports:
            # Expose the default PostgreSQL port
            - 5432/tcp
          # Set environment variables for the PostgreSQL service
          env:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: admin
            POSTGRES_DB: scraper
      #Job's steps
      steps:
        #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
        - uses: actions/checkout@v1
        #Set up JDK 11
        - name: Set up JDK
          uses: actions/setup-java@v1
          with:
            java-version: '11'
        #Set up Maven cache
        - name: Cache Maven packages
          #This action allows caching dependencies and build outputs to improve workflow execution time.
          uses: actions/cache@v1
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        # Run PostgreSQL setup script
        - name: Run PostgreSQL setup script
          env:
            # Pass the PostgreSQL service port to the setup script
            POSTGRES_PORT: ${{ job.services.postgres.ports['5432'] }}
          run: |
            psql -h localhost -p $POSTGRES_PORT -U postgres -f setup.sql
        #Run Tests
        - name: Run Unit Tests
          env:
            # Pass the PostgreSQL service port to the test command
            DB_URL: jdbc:postgresql://localhost:${{ job.services.postgres.ports['5432'] }}/scraper
          run: mvn -B test -Dspring.datasource.url=${{ env.DB_URL }}


  owasp:
    permissions: write-all
    name: OWASP ZAP SCANS
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Building Docker Image
        run: docker-compose build
      - name: Launching the app
        run: docker-compose up --detach

      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:5000'
          issue_title: OWASP Security Testing


